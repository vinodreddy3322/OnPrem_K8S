parameters {
  string(
    defaultValue: '',
    description: 'Enter the comma-separated names of the EKS clusters to check. Leave blank to check all clusters.',
    name: 'EKS_CLUSTER_NAMES'
  )
}

pipeline {
  agent any
  
  environment {
    AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    AWS_REGION = 'us-west-2' // Replace with your AWS region
  }
  
  stages {
    stage('Print Error Pods') {
      steps {
        script {
          def eks = [:]
          eks.withAWS(region: AWS_REGION, credentials: 'aws') {
            def clusters
            if ("${params.EKS_CLUSTER_NAMES}".trim()) {
              clusters = "${params.EKS_CLUSTER_NAMES}".split(',').collect { it.trim() }
            } else {
              clusters = sh(script: "aws eks list-clusters --query 'clusters[]'", returnStdout: true).trim().split()
            }
            for (cluster in clusters) {
              def kubeconfig = sh(script: "aws eks update-kubeconfig --name ${cluster} --query 'kubeconfig'", returnStdout: true).trim()
              sh(script: "kubectl get pods --kubeconfig <(echo ${kubeconfig}) --all-namespaces --field-selector status.phase!=Running,status.phase!=Succeeded --output=jsonpath='{range .items[?(@.status.phase == \"Failed\" || @.status.phase == \"Unknown\")]}{.metadata.namespace}{\"/\"}{.metadata.name}{\"\\n\"}{end}'")
            }
          }
        }
      }
    }
  }
  
  post {
    always {
      cleanWs()
    }
  }
}
